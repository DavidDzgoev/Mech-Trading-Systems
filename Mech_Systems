{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Механика.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN3dJ5UFnKz6lanoMAPn8iu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nikitaoltyan/Mech-Trading-Systems/blob/main/Mech_Systems\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tG9Ee1hc_Fqo"
      },
      "source": [
        "import pandas as pd\r\n",
        "import plotly.graph_objects as go"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "WOKeZvGACEKT",
        "outputId": "dc68d65f-1df5-457e-834b-89968887b9d5"
      },
      "source": [
        "data = pd.read_excel(\"Data.xlsx\")\r\n",
        "data"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>&lt;DATE&gt;</th>\n",
              "      <th>&lt;OPEN&gt;</th>\n",
              "      <th>&lt;HIGH&gt;</th>\n",
              "      <th>&lt;LOW&gt;</th>\n",
              "      <th>&lt;CLOSE&gt;</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20200225</td>\n",
              "      <td>345.45</td>\n",
              "      <td>348.00</td>\n",
              "      <td>337.50</td>\n",
              "      <td>337.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20200226</td>\n",
              "      <td>337.00</td>\n",
              "      <td>342.70</td>\n",
              "      <td>330.40</td>\n",
              "      <td>339.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20200227</td>\n",
              "      <td>336.60</td>\n",
              "      <td>338.80</td>\n",
              "      <td>326.00</td>\n",
              "      <td>329.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20200228</td>\n",
              "      <td>321.00</td>\n",
              "      <td>333.30</td>\n",
              "      <td>307.25</td>\n",
              "      <td>320.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20200302</td>\n",
              "      <td>330.00</td>\n",
              "      <td>332.65</td>\n",
              "      <td>314.10</td>\n",
              "      <td>327.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>20210220</td>\n",
              "      <td>322.50</td>\n",
              "      <td>323.70</td>\n",
              "      <td>320.70</td>\n",
              "      <td>323.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>20210222</td>\n",
              "      <td>323.80</td>\n",
              "      <td>323.90</td>\n",
              "      <td>319.80</td>\n",
              "      <td>320.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>20210224</td>\n",
              "      <td>320.00</td>\n",
              "      <td>320.20</td>\n",
              "      <td>313.90</td>\n",
              "      <td>315.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>252</th>\n",
              "      <td>20210225</td>\n",
              "      <td>317.10</td>\n",
              "      <td>317.95</td>\n",
              "      <td>313.90</td>\n",
              "      <td>314.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>20210226</td>\n",
              "      <td>313.50</td>\n",
              "      <td>316.60</td>\n",
              "      <td>311.80</td>\n",
              "      <td>313.05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>254 rows × 5 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       <DATE>  <OPEN>  <HIGH>   <LOW>  <CLOSE>\n",
              "0    20200225  345.45  348.00  337.50   337.50\n",
              "1    20200226  337.00  342.70  330.40   339.00\n",
              "2    20200227  336.60  338.80  326.00   329.00\n",
              "3    20200228  321.00  333.30  307.25   320.50\n",
              "4    20200302  330.00  332.65  314.10   327.20\n",
              "..        ...     ...     ...     ...      ...\n",
              "249  20210220  322.50  323.70  320.70   323.20\n",
              "250  20210222  323.80  323.90  319.80   320.20\n",
              "251  20210224  320.00  320.20  313.90   315.65\n",
              "252  20210225  317.10  317.95  313.90   314.80\n",
              "253  20210226  313.50  316.60  311.80   313.05\n",
              "\n",
              "[254 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gAFiYQxYCVY7"
      },
      "source": [
        "plot=[go.Candlestick(x=[i for i in range (0, len(data['<DATE>']))],\r\n",
        "        open=data['<OPEN>'],\r\n",
        "        high=data['<HIGH>'],\r\n",
        "        low=data['<LOW>'],\r\n",
        "        close=data['<CLOSE>'])]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "6i_HJPOrDQVD",
        "outputId": "29979258-748d-436a-c5d8-6bdd24315244"
      },
      "source": [
        "figSignal = go.Figure(data=plot)\r\n",
        "figSignal.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"523cab50-b240-47fa-b6e9-2f448bb2df5d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"523cab50-b240-47fa-b6e9-2f448bb2df5d\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        '523cab50-b240-47fa-b6e9-2f448bb2df5d',\n",
              "                        [{\"close\": [337.5, 339.0, 329.0, 320.5, 327.2, 328.25, 328.75, 329.55, 318.8, 294.8, 293.3, 272.95, 269.0, 267.1, 268.45, 256.75, 265.5, 276.5, 262.1, 280.0, 278.35, 285.95, 290.0, 296.95, 299.1, 297.0, 299.3, 295.6, 308.85, 308.7, 313.85, 310.45, 310.95, 308.0, 310.95, 304.0, 303.4, 305.35, 306.0, 302.0, 309.7, 314.25, 306.8, 311.4, 313.5, 319.2, 319.6, 316.55, 320.4, 318.0, 320.3, 325.3, 323.6, 318.45, 315.15, 320.15, 325.5, 327.25, 332.55, 328.7, 327.1, 332.2, 331.9, 326.5, 324.05, 320.0, 319.6, 326.7, 329.7, 323.5, 326.25, 325.5, 329.15, 326.85, 322.8, 323.8, 328.0, 325.75, 326.05, 327.35, 325.0, 324.7, 325.45, 324.3, 325.95, 330.45, 330.85, 334.6, 338.1, 336.6, 321.1, 315.0, 314.95, 315.7, 317.0, 319.7, 321.0, 321.55, 322.75, 322.2, 323.85, 321.95, 321.0, 323.25, 326.7, 329.8, 325.6, 327.55, 333.3, 335.7, 333.95, 332.75, 329.75, 329.15, 329.55, 337.5, 337.9, 340.2, 341.95, 341.9, 342.0, 341.9, 341.5, 344.25, 344.75, 346.65, 348.7, 341.75, 335.9, 339.5, 335.8, 335.4, 336.0, 335.8, 332.35, 336.1, 332.2, 331.7, 333.7, 336.95, 338.75, 339.75, 337.45, 337.8, 339.45, 339.35, 337.2, 340.2, 344.4, 339.1, 338.7, 338.3, 340.45, 343.25, 340.2, 332.0, 335.15, 329.0, 330.8, 330.6, 332.6, 321.75, 321.75, 316.2, 320.8, 321.15, 320.45, 318.4, 317.25, 316.2, 313.15, 313.1, 311.6, 315.95, 319.25, 323.4, 323.65, 324.7, 322.6, 322.15, 318.95, 321.7, 323.15, 324.7, 321.6, 319.45, 317.7, 319.55, 314.85, 319.05, 318.8, 321.0, 321.65, 322.85, 321.0, 317.55, 316.85, 317.55, 318.05, 320.8, 324.0, 318.65, 318.95, 320.7, 321.4, 325.9, 328.05, 325.3, 326.85, 326.75, 326.45, 327.9, 327.65, 330.25, 331.2, 334.9, 337.8, 334.05, 339.4, 337.55, 334.2, 331.9, 337.35, 332.85, 333.0, 331.1, 332.2, 329.3, 329.9, 333.8, 336.3, 334.5, 333.6, 328.85, 330.75, 331.95, 335.05, 333.55, 336.0, 333.75, 333.3, 330.4, 328.45, 327.1, 330.15, 327.9, 323.1, 320.7, 322.4, 323.2, 320.2, 315.65, 314.8, 313.05], \"high\": [348.0, 342.7, 338.8, 333.3, 332.65, 335.4, 328.85, 331.55, 328.05, 321.35, 301.2, 299.9, 293.55, 272.9, 272.0, 268.4, 266.95, 283.3, 276.5, 280.0, 287.85, 287.65, 293.0, 297.0, 300.65, 299.75, 302.85, 304.4, 310.5, 314.55, 313.85, 314.7, 311.3, 311.35, 311.8, 311.0, 309.8, 309.85, 309.25, 304.95, 312.55, 314.25, 314.1, 311.95, 319.65, 323.15, 323.95, 318.05, 321.05, 321.9, 322.45, 326.6, 325.8, 324.4, 320.7, 322.35, 326.3, 328.85, 339.85, 337.95, 330.95, 332.35, 339.0, 337.7, 329.85, 324.85, 323.55, 327.6, 333.5, 330.6, 328.55, 331.45, 330.35, 331.2, 326.5, 325.2, 328.5, 328.9, 327.55, 330.0, 327.65, 326.3, 327.1, 326.95, 326.65, 333.0, 334.0, 335.0, 339.6, 338.55, 323.2, 322.0, 317.7, 318.8, 317.7, 319.95, 322.1, 322.15, 322.9, 325.85, 324.5, 325.2, 323.55, 323.7, 326.95, 330.3, 328.95, 328.4, 334.95, 336.0, 337.9, 335.3, 334.05, 332.3, 331.65, 338.25, 339.1, 342.1, 344.55, 343.65, 346.4, 344.25, 342.85, 346.0, 345.85, 346.75, 349.7, 349.1, 343.95, 341.3, 342.9, 339.3, 338.25, 337.0, 336.95, 336.65, 337.45, 333.75, 333.9, 337.5, 339.7, 340.4, 341.5, 338.0, 341.95, 344.5, 340.65, 340.85, 345.2, 346.2, 341.0, 340.8, 341.0, 344.3, 344.95, 341.75, 336.7, 331.15, 333.3, 332.9, 332.75, 333.55, 324.2, 323.75, 322.4, 321.95, 322.8, 321.35, 319.95, 319.35, 316.75, 315.95, 312.35, 317.0, 320.2, 324.0, 324.2, 328.3, 326.0, 324.3, 322.5, 321.95, 323.6, 325.9, 324.7, 323.1, 319.9, 320.1, 321.1, 319.4, 319.7, 321.95, 322.85, 325.4, 323.85, 322.4, 320.0, 320.1, 319.3, 324.2, 324.75, 327.2, 322.3, 320.95, 323.0, 326.8, 329.0, 329.45, 327.8, 328.2, 327.8, 329.7, 329.75, 331.7, 332.05, 336.2, 338.85, 338.0, 339.8, 340.1, 339.4, 335.4, 338.4, 337.45, 334.2, 334.25, 333.2, 333.75, 330.85, 335.15, 336.95, 337.35, 337.2, 333.85, 331.85, 333.35, 335.3, 335.85, 338.1, 336.5, 333.9, 334.15, 331.15, 329.05, 330.8, 331.4, 329.45, 324.45, 323.6, 323.7, 323.9, 320.2, 317.95, 316.6], \"low\": [337.5, 330.4, 326.0, 307.25, 314.1, 325.05, 319.25, 324.5, 311.8, 293.0, 283.1, 271.7, 266.0, 255.0, 256.2, 253.35, 250.55, 270.35, 261.0, 268.85, 269.5, 272.25, 281.35, 283.25, 291.0, 294.0, 295.85, 295.0, 297.3, 306.2, 306.1, 308.95, 306.05, 303.55, 307.8, 300.75, 299.25, 304.4, 303.5, 293.5, 299.45, 306.65, 306.1, 307.3, 308.7, 313.5, 317.3, 312.35, 317.35, 317.55, 318.0, 320.5, 320.3, 318.05, 315.05, 318.0, 320.3, 324.0, 327.0, 328.3, 325.1, 326.85, 331.55, 326.3, 321.7, 318.0, 316.85, 320.55, 326.75, 321.15, 321.7, 324.05, 324.65, 324.8, 322.05, 317.5, 325.55, 323.35, 323.55, 326.35, 322.7, 323.4, 321.65, 323.6, 324.5, 325.5, 329.5, 330.45, 335.3, 314.0, 317.85, 314.0, 312.5, 315.3, 313.15, 316.1, 317.35, 319.8, 320.2, 321.5, 322.05, 321.25, 319.2, 321.0, 323.0, 325.75, 324.35, 325.6, 326.55, 330.7, 333.25, 329.65, 328.9, 327.9, 328.2, 329.5, 335.4, 335.8, 339.15, 340.2, 340.2, 338.25, 336.6, 341.3, 342.45, 341.4, 345.85, 341.1, 334.1, 331.6, 333.55, 332.7, 332.2, 331.05, 328.2, 330.05, 331.35, 330.25, 331.6, 333.5, 336.5, 337.1, 337.0, 334.35, 335.8, 339.0, 336.35, 334.6, 339.85, 338.15, 337.7, 336.4, 337.45, 339.7, 339.4, 329.35, 332.05, 327.5, 329.55, 329.4, 329.2, 320.1, 313.7, 315.2, 316.0, 316.65, 318.0, 317.2, 316.3, 315.9, 310.1, 308.2, 308.6, 308.2, 316.5, 317.0, 320.65, 323.6, 320.55, 320.65, 318.3, 316.65, 320.35, 319.25, 319.2, 318.5, 316.25, 317.6, 314.1, 313.5, 317.4, 316.8, 318.3, 321.25, 320.1, 317.1, 316.2, 317.1, 316.5, 317.65, 320.55, 318.25, 318.0, 318.2, 319.5, 321.3, 322.25, 321.5, 323.55, 325.5, 326.1, 325.1, 327.15, 327.9, 326.1, 331.9, 332.6, 330.7, 334.8, 335.5, 332.7, 330.0, 330.4, 332.75, 331.05, 330.0, 330.65, 327.7, 325.0, 329.45, 332.45, 333.0, 332.75, 328.8, 326.85, 330.2, 330.9, 331.2, 331.6, 332.0, 331.55, 329.5, 326.15, 323.0, 327.5, 327.5, 322.75, 320.05, 319.05, 320.7, 319.8, 313.9, 313.9, 311.8], \"open\": [345.45, 337.0, 336.6, 321.0, 330.0, 333.4, 325.1, 331.55, 326.5, 300.0, 299.5, 287.1, 275.75, 270.75, 263.1, 262.2, 259.0, 270.8, 269.9, 270.0, 281.0, 278.95, 288.55, 287.0, 297.2, 297.6, 298.45, 298.5, 299.9, 310.5, 307.9, 314.65, 311.05, 310.9, 308.4, 311.0, 305.0, 306.35, 304.95, 303.5, 300.1, 312.05, 313.8, 308.0, 310.5, 315.0, 321.5, 314.75, 318.05, 321.2, 318.1, 320.6, 324.6, 322.3, 317.4, 318.0, 321.05, 326.6, 327.6, 333.45, 327.85, 327.25, 333.5, 331.45, 327.55, 323.2, 323.0, 321.0, 327.5, 329.6, 323.95, 327.0, 326.95, 329.15, 326.5, 321.45, 325.55, 328.0, 325.5, 326.35, 327.5, 325.55, 323.55, 326.0, 324.95, 326.1, 331.5, 331.0, 335.8, 338.55, 320.95, 321.15, 315.0, 316.3, 316.1, 317.55, 319.1, 320.05, 321.3, 322.95, 322.6, 324.3, 321.85, 321.75, 323.25, 326.7, 328.95, 326.3, 328.0, 332.6, 335.15, 335.25, 332.25, 330.7, 329.55, 329.75, 337.0, 339.15, 340.05, 342.3, 342.35, 341.0, 342.85, 342.15, 344.3, 344.7, 347.0, 349.0, 342.55, 337.4, 339.9, 337.05, 336.25, 335.95, 336.95, 331.15, 336.05, 332.85, 333.0, 333.75, 337.2, 337.5, 340.05, 337.85, 337.05, 340.75, 340.65, 337.1, 340.0, 345.0, 339.1, 340.35, 337.95, 339.7, 343.6, 341.45, 333.1, 328.8, 330.15, 331.45, 330.6, 331.6, 322.15, 322.5, 316.0, 321.95, 320.9, 320.85, 318.35, 317.75, 316.6, 313.65, 311.1, 311.75, 316.5, 321.95, 322.85, 324.1, 325.9, 322.7, 321.1, 319.8, 322.15, 322.9, 324.7, 322.0, 319.9, 318.2, 319.6, 316.3, 318.65, 318.15, 320.05, 321.95, 323.0, 321.4, 318.95, 317.65, 318.0, 318.25, 321.5, 324.75, 320.2, 319.95, 320.5, 322.05, 325.0, 327.75, 324.75, 326.7, 327.1, 327.0, 329.1, 328.0, 331.5, 332.0, 333.6, 338.0, 334.85, 337.6, 337.9, 334.5, 332.5, 335.2, 333.05, 333.5, 331.0, 332.2, 328.05, 330.5, 334.9, 336.95, 334.95, 333.6, 330.0, 331.2, 333.0, 335.1, 332.75, 336.45, 333.6, 333.35, 331.0, 328.05, 327.75, 330.0, 327.9, 324.2, 321.3, 322.5, 323.8, 320.0, 317.1, 313.5], \"type\": \"candlestick\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253]}],\n",
              "                        {\"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('523cab50-b240-47fa-b6e9-2f448bb2df5d');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FoFn5XUKETzb",
        "outputId": "23f762b2-3381-4b73-da4e-5507d6665610"
      },
      "source": [
        "def find_highs(data, rang):\r\n",
        "  lenth = len(data[\"<OPEN>\"])\r\n",
        "  result = []\r\n",
        "  for day in range(rang, lenth-rang):\r\n",
        "    if data[\"<HIGH>\"][day] == max(data[\"<HIGH>\"][day-rang:day+rang]):\r\n",
        "      result.append(day)\r\n",
        "  return result\r\n",
        "find_highs(data, 10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[31, 58, 88, 126, 149, 177, 219, 238]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uWD2J0Z3IJz4",
        "outputId": "9b6e90fb-3c3d-4156-fcab-ca9540eeceec"
      },
      "source": [
        "def find_lows(data, rang):\r\n",
        "  lenth = len(data[\"<OPEN>\"])\r\n",
        "  result = []\r\n",
        "  for day in range(rang, lenth-rang):\r\n",
        "    if data[\"<LOW>\"][day] == min(data[\"<LOW>\"][day-rang:day+rang]):\r\n",
        "      result.append(day)\r\n",
        "  return result\r\n",
        "find_lows(data, 10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[16, 39, 66, 92, 134, 171, 173, 189, 228]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3hGlET2Jd9a",
        "outputId": "5619e108-b360-4e51-c1b4-bde5232bb031"
      },
      "source": [
        "def head_with_shoulders(data, rang):\r\n",
        "  highs = data[\"<HIGH>\"]\r\n",
        "  highs_indexes = find_highs(data=data, rang=rang)\r\n",
        "  lows = find_lows(data=data, rang=rang)\r\n",
        "  result = []\r\n",
        "  shoulders = []\r\n",
        "  for item in range(1, len(highs_indexes)-1):\r\n",
        "    head = highs[highs_indexes[item]]\r\n",
        "    leftShoulder = highs[highs_indexes[item-1]]\r\n",
        "    rightShoulder = highs[highs_indexes[item+1]]\r\n",
        "    # Голова выше плеч\r\n",
        "    meanE = 0\r\n",
        "    if leftShoulder<head>rightShoulder:\r\n",
        "      meanE = (leftShoulder + rightShoulder)/2\r\n",
        "    #ограничение величины плеч\r\n",
        "    if meanE != 0:\r\n",
        "      if max([abs(leftShoulder-meanE), abs(rightShoulder-meanE)]) <= meanE*0.02:\r\n",
        "        result.append(highs_indexes[item])\r\n",
        "        shoulders.append((highs_indexes[item-1], highs_indexes[item+1]))\r\n",
        "  return result, shoulders\r\n",
        "head_with_shoulders(data, 15)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([126, 219], [(88, 149), (177, 238)])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0cwA2SbDWtL-",
        "outputId": "db14902c-ed8a-4753-844f-26222a583835"
      },
      "source": [
        "bool(1-False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oVNghklhbMiq",
        "outputId": "2365cc52-4de1-46cb-e408-8c9aee892930"
      },
      "source": [
        "def more(x,y):\r\n",
        "  return x>y\r\n",
        "more(1,2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZXQkdqmfbhdS"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}